apiVersion: batch/v1
kind: CronJob
metadata:
  name: monitor
  namespace: default
  labels:
    app: monitor
  annotations:
    app: monitor
spec:
  schedule: "*/1 * * * * "
  jobTemplate:
    metadata:
      labels:
        name: monitor
    spec:
      template:
        spec:
          serviceAccountName: monitor-sa
          restartPolicy: OnFailure
          tolerations:
          - key: agent.kiam.uswitch/not-ready
            operator: Exists
            effect: NoExecute
          nodeSelector:
            kubernetes.io/hostname: k3d-test-agent-0
          volumes:
          - name: tmp-var
            emptyDir: {}
          containers:
          - name: monitor
            # It monitors the state of daemonset `demo-ds`, which runs the python script actually.
            # When the pod status is ready, it will remove specified taint from the same node.
            #
            # image: bitnami/kubectl:1.25.11-debian-11-r5
            image: registry:5000/kubectl:1.25.11
            resources:
              limits:
                cpu: 10m
                memory: 10Mi
              requests:
                cpu: 2m
                memory: 2Mi
            volumeMounts:
            - name: tmp-var
              mountPath: /app/var
            env:
              - name: NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: MANAGED_TAINT
                value: "kiam.uswitch/agent-not-ready:NoExecute"
              - name: DAEMONSET_LABELS
                value: "name=demo-ds,component=test"
                # value: "app.kubernetes.io/name=kiam,component=agent"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
              runAsGroup: 1000
            command:
              - "/bin/bash"
              - "-c"
              - "-x"
              - |
                PODS_CUSTOME_OUTPUT=-o=custom-columns=NodeName:'{.spec.nodeName}',PodStatus:'{status.conditions[?(@.type=="Ready")].status}'

                kubectl get pods -n ${NAMESPACE} -l ${DAEMONSET_LABELS} ${PODS_CUSTOME_OUTPUT} | grep 'True' | cut -d' ' -f1 > /app/var/NODE_NAMES

                for NODE_NAME in $(cat /app/var/NODE_NAMES); do
                  kubectl taint nodes ${NODE_NAME} ${MANAGED_TAINT}-
                done

                exit 0
